<!DOCTYPE html>
<html>

<head>
<meta name="viewport" content="initial-scale=1.0, user-scalable=no">

    <% include ./partials/_header %>
    <script src="/scripts/maps.js"></script>

        <script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBK7BCsfqIsm19orAsbdqLqYCODKv-nYA4&libraries=places"></script>


</head>

<body>
 <div id="map"></div>

<div>
<input id="address" type="textbox" value="calgary, Alberta">
<input type="button" value="Encode" onclick="codeAddress()">
    <button onclick="search()"></button>
    <input id="pac-input" class="controls" type="text" placeholder="Search Box">
<div id="form">
      <table>
      <tr><td>Name:</td> <td><input type='text' id='name'/> </td> </tr>
      <tr><td>Address:</td> <td><input type='text' id='address'/> </td> </tr>
      <tr><td>Type:</td> <td><select id='type'> +
                 <option value='bar' SELECTED>bar</option>
                 <option value='restaurant'>restaurant</option>
                 </select> </td></tr>
                 <tr><td></td><td><input type='button' value='Save' onclick='saveData()'/></td></tr>
      </table>
    </div>

  </div>
<!-- not morgans code -->
    <input id="pac-input" class="controls" type="text" placeholder="Search Box">
    <div id="map"></div>
    <script>
    var markers = [];
    var uniqueId = 1;

    function GeoLocation() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(success, error);
        } else {
            alert('geolocation not supported');
        }

        function success(position) {
            initAutocomplete(position.coords.latitude, position.coords.longitude);
        }

        function error(msg) {
            alert('error: ' + msg);
        }

    }

    function initAutocomplete(latitude, longitude) {

        var center = { lat: latitude, lng: longitude };

        var map = new google.maps.Map(document.getElementById('map'), {
            center: { lat: latitude, lng: longitude },
            zoom: 12,
            mapTypeId: 'roadmap'
        });

        var marker = new google.maps.Marker({
            position: center,
            map: map
        });

        google.maps.event.addListener(map, 'click', function(e) {

            //Determine the location where the user has clicked.
            var location = e.latLng;

            //Create a marker and placed it on the map.
            var marker = new google.maps.Marker({
                position: location,
                map: map
            });

            //Set unique id
            marker.id = uniqueId;
            uniqueId++;

            //Attach click event handler to the marker.
            google.maps.event.addListener(marker, "click", function(e) {
                DeleteMarker(marker.id)
            });

            //Add marker to the array.
            markers.push(marker);
        });

        function DeleteMarker(id) {
            //Find and remove the marker from the Array
            for (var i = 0; i < markers.length; i++) {
                if (markers[i].id == id) {
                    //Remove the marker from Map
                    markers[i].setMap(null);

                    //Remove the marker from array.
                    markers.splice(i, 1);
                    return;
                }
            }
        };



        // Create the search box and link it to the UI element.
        var input = document.getElementById('pac-input');
        var searchBox = new google.maps.places.SearchBox(input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

        // Bias the SearchBox results towards current map's viewport.
        map.addListener('bounds_changed', function() {
            searchBox.setBounds(map.getBounds());
        });

        // Listen for the event fired when the user selects a prediction and retrieve
        // more details for that place.
        searchBox.addListener('places_changed', function() {
            var places = searchBox.getPlaces();

            if (places.length == 0) {
                return;
            }



            // For each place, get the icon, name and location.
            var bounds = new google.maps.LatLngBounds();
            places.forEach(function(place) {
                if (!place.geometry) {
                    console.log("Returned place contains no geometry");
                    return;
                }
                var icon = {
                    url: place.icon,
                    size: new google.maps.Size(71, 71),
                    origin: new google.maps.Point(0, 0),
                    anchor: new google.maps.Point(17, 34),
                    scaledSize: new google.maps.Size(25, 25)
                };

                // Create a marker for each place.
                markers.push(new google.maps.Marker({
                    map: map,
                    title: place.name,
                    position: place.geometry.location
                }));

                if (place.geometry.viewport) {
                    // Only geocodes have viewport.
                    bounds.union(place.geometry.viewport);
                } else {
                    bounds.extend(place.geometry.location);
                }


                console.log(place.name)
                console.log(place.formatted_address)

            });
            map.fitBounds(bounds);
        });
    }
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCnAHEAaAO9M1jgkn9jg4iQGS6xt_Vtexc&libraries=places&callback=GeoLocation" async defer></script>
    <form action="/" method="POST">
        <button type="button" class="save">Save Map</button>
    </form>
</body>

</html>
